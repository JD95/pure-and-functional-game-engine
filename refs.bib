
@article{tagliasacchi_cascade:_2008,
	title = {Cascade: A Parallel Programming Framework for Video Game Engines},
	url = {https://pdfs.semanticscholar.org/b60f/07ad1eb410352e2b51b9b01d08df593f610b.pdf#page=8},
	abstract = {The Cascade Parallel Processing Framework ({PPF}) is a user
level library that facilitates manual parallelization of complex
C++ systems. In Cascade, processing duties of the system
are enclosed in a Cascade Task. Tasks are linked by
dependencies in a task dependency graph. The task graph
is traversed at runtime by the Cascade Job Manager who
assigns tasks to threads for execution. The Job Manager
must correctly satisfy dependencies while maximizing performance.
While a task-based {PPF} is not a new concept,
Cascade’s unique goal is to address complex systems, such
as video game engines. These systems are built as multiple
interacting sub-systems, with non-trivial dependencies. Existing
{PPFs}, while suitable for parallelization of individual
sub-systems, do not solve the entire problem. In this paper
we describe the early design and implementation of Cascade,
present preliminary evaluation, and outline plans for future
research.},
	pages = {2},
	journaltitle = {{PESPMA} 2008},
	author = {Tagliasacchi, Andrea and Dickie, Ryan and Couture-Beil, Alex and Best, Micah and Fedorova, Alexandra and Bronsword, Andrew},
	urldate = {2017-09-10},
	date = {2008},
	keywords = {engine, parallel, read},
	file = {Tagliasacchi et al_2008_Cascade.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\UASTC3VU\\Tagliasacchi et al_2008_Cascade.pdf:application/pdf}
}

@article{andrews_designing_2009,
	title = {Designing the framework of a parallel game engine},
	volume = {109},
	url = {http://www.design1online.com/downloads/whitepapers/parallelgameengine.pdf},
	pages = {127},
	journaltitle = {Articles on Intel Software Network},
	author = {Andrews, Jeff},
	urldate = {2017-09-10},
	date = {2009},
	keywords = {parallel, engine, read},
	file = {Andrews_2009_Designing the framework of a parallel game engine.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\NVHT4ZIV\\Andrews_2009_Designing the framework of a parallel game engine.pdf:application/pdf}
}

@inproceedings{discolo_lock_2006,
	title = {Lock free data structures using {STM} in Haskell},
	url = {http://link.springer.com/10.1007%2F11737414_6},
	pages = {65--80},
	booktitle = {International Symposium on Functional and Logic Programming},
	publisher = {Springer},
	author = {Discolo, Anthony and Harris, Tim and Marlow, Simon and Jones, Simon Peyton and Singh, Satnam},
	urldate = {2017-09-10},
	date = {2006},
	keywords = {parallel, read},
	file = {Discolo et al_2006_Lock free data structures using STM in Haskell.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\ZCH64IA9\\Discolo et al_2006_Lock free data structures using STM in Haskell.pdf:application/pdf}
}

@collection{jeannot_euro-par_2011,
	location = {Berlin, Heidelberg},
	title = {Euro-Par 2011 Parallel Processing},
	volume = {6853},
	isbn = {978-3-642-23396-8 978-3-642-23397-5},
	url = {http://link.springer.com/10.1007/978-3-642-23397-5},
	series = {Lecture Notes in Computer Science},
	publisher = {Springer Berlin Heidelberg},
	editor = {Jeannot, Emmanuel and Namyst, Raymond and Roman, Jean},
	editorb = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard},
	editorbtype = {redactor},
	urldate = {2017-09-10},
	date = {2011},
	note = {{DOI}: 10.1007/978-3-642-23397-5},
	keywords = {parallel, read},
	file = {Jeannot et al_2011_Euro-Par 2011 Parallel Processing.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\358GHKT9\\Jeannot et al_2011_Euro-Par 2011 Parallel Processing.pdf:application/pdf}
}

@inproceedings{tulip_multi-threaded_2006,
	location = {Murdoch University, Australia, Australia},
	title = {Multi-threaded Game Engine Design},
	url = {http://dl.acm.org/citation.cfm?id=1231894.1231896},
	series = {{IE} '06},
	abstract = {Game engines are specialized middleware which facilitate rapid game development. Until now they have been highly optimized to extract maximum performance from single processor hardware. In the last couple of years improvements in single processor hardware have approached physical limits and performance gains have slowed to become incremental. As a consequence, improvements in game engine performance have also become incremental. Currently, hardware manufacturers are shifting to dual and multi-core processor architectures, and the latest game consoles also feature multiple processors. This presents a challenge to game engine developers because of the unfamiliarity and complexity of concurrent programming. The next generation of game engines must address the issues of concurrency if they are to take advantage of the new hardware. This paper discusses the issues, approaches, and tradeoffs that need to be considered in the design of a multi-threaded game engine.},
	pages = {9--14},
	booktitle = {Proceedings of the 3rd Australasian Conference on Interactive Entertainment},
	publisher = {Murdoch University},
	author = {Tulip, James and Bekkema, James and Nesbitt, Keith},
	date = {2006},
	keywords = {game engine, multi-threaded, read}
}

@inproceedings{sansom_generational_1993,
	title = {Generational garbage collection for Haskell},
	url = {http://dl.acm.org/citation.cfm?id=165195},
	pages = {106--116},
	booktitle = {Proceedings of the conference on Functional programming languages and computer architecture},
	publisher = {{ACM}},
	author = {Sansom, Patrick M. and Peyton Jones, Simon L.},
	urldate = {2017-09-11},
	date = {1993},
	keywords = {efficiency, read},
	file = {Sansom_Peyton Jones_1993_Generational garbage collection for Haskell.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\7AITDWUH\\Sansom_Peyton Jones_1993_Generational garbage collection for Haskell.pdf:application/pdf}
}

@inproceedings{nilsson_functional_2002,
	title = {Functional reactive programming, continued},
	url = {http://dl.acm.org/citation.cfm?id=581695},
	pages = {51--64},
	booktitle = {Proceedings of the 2002 {ACM} {SIGPLAN} workshop on Haskell},
	publisher = {{ACM}},
	author = {Nilsson, Henrik and Courtney, Antony and Peterson, John},
	urldate = {2017-09-11},
	date = {2002},
	keywords = {{FRP}, read}
}

@inproceedings{yang_efficient_2015,
	title = {Efficient communication and collection with compact normal forms},
	isbn = {978-1-4503-3669-7},
	url = {http://dl.acm.org/citation.cfm?doid=2784731.2784735},
	doi = {10.1145/2784731.2784735},
	pages = {362--374},
	publisher = {{ACM} Press},
	author = {Yang, Edward Z. and Campagna, Giovanni and Ağacan, Ömer S. and El-Hassany, Ahmed and Kulkarni, Abhishek and Newton, Ryan R.},
	urldate = {2017-09-11},
	date = {2015},
	langid = {english},
	keywords = {efficiency, read},
	file = {Yang et al_2015_Efficient communication and collection with compact normal forms.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\NT8NBSWV\\Yang et al_2015_Efficient communication and collection with compact normal forms.pdf:application/pdf}
}

@inproceedings{wadler_linear_1990,
	title = {Linear types can change the world},
	volume = {2},
	url = {https://pdfs.semanticscholar.org/4106/dd3be01f1283f80a8260420138d6ee874753.pdf},
	pages = {347--359},
	booktitle = {{IFIP} {TC}},
	author = {Wadler, Philip},
	urldate = {2017-09-11},
	date = {1990},
	keywords = {efficiency, read},
	file = {Wadler_1990_Linear types can change the world.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\3ZDJI72M\\Wadler_1990_Linear types can change the world.pdf:application/pdf}
}

@collection{pierce_advanced_2005,
	location = {Cambridge, Mass},
	title = {Advanced topics in types and programming languages},
	isbn = {978-0-262-16228-9},
	pagetotal = {574},
	publisher = {{MIT} Press},
	editor = {Pierce, Benjamin C.},
	date = {2005},
	keywords = {Programming languages (Electronic computers), efficiency, read},
	file = {Pierce_2005_Advanced topics in types and programming languages.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\NBI7ND48\\Pierce_2005_Advanced topics in types and programming languages.pdf:application/pdf}
}

@inproceedings{marlow_parallel_2008,
	title = {Parallel generational-copying garbage collection with a block-structured heap},
	url = {http://dl.acm.org/citation.cfm?id=1375637},
	pages = {11--20},
	booktitle = {Proceedings of the 7th international symposium on Memory management},
	publisher = {{ACM}},
	author = {Marlow, Simon and Harris, Tim and James, Roshan P. and Peyton Jones, Simon},
	urldate = {2017-09-22},
	date = {2008},
	keywords = {read},
	file = {par-gc-ismm08.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\5DPWMS2Y\\par-gc-ismm08.pdf:application/pdf}
}

@inproceedings{anderson_case_2008,
	location = {New York, {NY}, {USA}},
	title = {The Case for Research in Game Engine Architecture},
	isbn = {978-1-60558-218-4},
	url = {http://doi.acm.org/10.1145/1496984.1497031},
	doi = {10.1145/1496984.1497031},
	series = {Future Play '08},
	abstract = {This paper is a call for research in the field of game engine architecture and design, a more comprehensive and thorough understanding of which we consider to be essential for its development. We present a number of key aspects that may help to define the problem space and provide a catalogue of questions that we believe identify areas of interest for future investigation.},
	pages = {228--231},
	booktitle = {Proceedings of the 2008 Conference on Future Play: Research, Play, Share},
	publisher = {{ACM}},
	author = {Anderson, Eike Falk and Engel, Steffen and Comninos, Peter and {McLoughlin}, Leigh},
	urldate = {2017-09-24},
	date = {2008},
	keywords = {entertainment systems, game engine, game engine architecture, read},
	file = {anderson2008.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\6935QGFB\\anderson2008.pdf:application/pdf}
}

@inproceedings{chen_rolling_1997,
	location = {New York, {NY}, {USA}},
	title = {Rolling Your Own Mutable {ADT}—a Connection Between Linear Types and Monads},
	isbn = {978-0-89791-853-4},
	url = {http://doi.acm.org/10.1145/263699.263708},
	doi = {10.1145/263699.263708},
	series = {{POPL} '97},
	abstract = {A methodology is described whereby a linear {ADT} may be rigorously encapsulated within a state monad. A {CPS}-like translation from the original {ADT} axioms into monadic ones is also described and proven correct, so that reasoning can be accomplished at the monadic level without exposing the state. The {ADT} axioms are suitably constrained by a linear type system to make this translation possible. This constraint also allows the state to be "updated in place," a notion made precise via a graph-rewrite operational semantics.},
	pages = {54--66},
	booktitle = {Proceedings of the 24th {ACM} {SIGPLAN}-{SIGACT} Symposium on Principles of Programming Languages},
	publisher = {{ACM}},
	author = {Chen, Chih-Ping and Hudak, Paul},
	urldate = {2017-09-27},
	date = {1997},
	keywords = {read},
	file = {chen1997.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\6FX7GCA3\\chen1997.pdf:application/pdf}
}

@article{lafont_linear_1988,
	title = {The Linear Abstract Machine},
	volume = {59},
	issn = {0304-3975},
	url = {http://dx.doi.org/10.1016/0304-3975(88)90100-4},
	doi = {10.1016/0304-3975(88)90100-4},
	pages = {157--180},
	number = {1},
	journaltitle = {Theor. Comput. Sci.},
	author = {Lafont, Y.},
	urldate = {2017-09-28},
	date = {1988-07},
	keywords = {read},
	file = {lafont1988.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\4UKIDXTC\\lafont1988.pdf:application/pdf}
}

@inproceedings{messaoudi_dissecting_2015,
	title = {Dissecting games engines: The case of Unity3D},
	doi = {10.1109/NetGames.2015.7382990},
	shorttitle = {Dissecting games engines},
	abstract = {Recent trends on how video games are played have pushed for the need to revise the game engine architecture. Indeed, game players are more mobile, using smartphones and tablets that lack {CPU} resources compared to {PC} and dedicated box. Two emerging solutions, cloud gaming and computing offload, would represent the next steps toward improving game player experience. By consequence, dissecting and analyzing game engines performances would help to better understand how to move to these new directions, which is so far missing in the literature. In this paper, we fill this gap by analyzing and evaluating one of the most popular game engine, namely Unity3D. First, we dissected the Unity3D architecture and modules. A benchmark was then used to evaluate the {CPU} and {GPU} performances of the different modules constituting Unity3D, for five representative games.},
	eventtitle = {2015 International Workshop on Network and Systems Support for Games ({NetGames})},
	pages = {1--6},
	booktitle = {2015 International Workshop on Network and Systems Support for Games ({NetGames})},
	author = {Messaoudi, F. and Simon, G. and Ksentini, A.},
	date = {2015-12},
	keywords = {cloud computing, cloud gaming, computer games, {CPU}, {CPU} performance evaluation, Engines, Games, {GPU} performance evaluation, Graphics processing units, Hardware, human factors, mobile computing, {PC}, Pipelines, Rendering (computer graphics), smart phones, smartphones, tablets, Three-dimensional displays, Unity3D architecture, video game engine architecture, read},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\jeffr\\Zotero\\storage\\7MYJISWX\\7382990.html:text/html;messaoudi15netgames.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\UBID4ZSP\\messaoudi15netgames.pdf:application/pdf;Messaoudi et al_2015_Dissecting games engines.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\AJD7LV8N\\Messaoudi et al_2015_Dissecting games engines.pdf:application/pdf}
}

@inproceedings{wan_functional_2000,
	location = {New York, {NY}, {USA}},
	title = {Functional Reactive Programming from First Principles},
	isbn = {978-1-58113-199-4},
	url = {http://doi.acm.org/10.1145/349299.349331},
	doi = {10.1145/349299.349331},
	series = {{PLDI} '00},
	abstract = {Functional Reactive Programming, or {FRP}, is a general framework for programming hybrid systems in a high-level, declarative manner. The key ideas in {FRP} are its notions of behaviors and events. Behaviors are time-varying, reactive values, while events are time-ordered sequences of discrete-time event occurrences. {FRP} is the essence of Fran, a domain-specific language embedded in Haskell for programming reactive animations, but {FRP} is now also being used in vision, robotics and other control systems applications. 
In this paper we explore the formal semantics of {FRP} and how it
relates to an implementation based on streams that represent (and therefore only approximate) continuous behaviors. We show that, in the limit as the sampling interval goes to zero, the implementation is faithful to the formal, continuous semantics, but only when certain constraints on behaviors are observed. We explore the nature of these constraints, which vary amongst the {FRP} primitives. Our results show both the power and limitations of this approach to language design and implementation. As an example of a limitation, we show that streams are incapable of representing instantaneous predicate events over behaviors.},
	pages = {242--252},
	booktitle = {Proceedings of the {ACM} {SIGPLAN} 2000 Conference on Programming Language Design and Implementation},
	publisher = {{ACM}},
	author = {Wan, Zhanyong and Hudak, Paul},
	urldate = {2017-09-28},
	date = {2000},
	keywords = {read},
	file = {wan2000.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\IYIKUPHE\\wan2000.pdf:application/pdf}
}

@inproceedings{elliott_push-pull_2009,
	title = {Push-pull functional reactive programming},
	url = {http://dl.acm.org/citation.cfm?id=1596643},
	pages = {25--36},
	booktitle = {Proceedings of the 2nd {ACM} {SIGPLAN} symposium on Haskell},
	publisher = {{ACM}},
	author = {Elliott, Conal M.},
	urldate = {2017-10-03},
	date = {2009},
	keywords = {read},
	file = {elliott2009.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\YNZ85LUW\\elliott2009.pdf:application/pdf}
}

@inproceedings{czaplicki_asynchronous_2013,
	location = {New York, {NY}, {USA}},
	title = {Asynchronous Functional Reactive Programming for {GUIs}},
	isbn = {978-1-4503-2014-6},
	url = {http://doi.acm.org/10.1145/2491956.2462161},
	doi = {10.1145/2491956.2462161},
	series = {{PLDI} '13},
	abstract = {Graphical user interfaces ({GUIs}) mediate many of our interactions with computers. Functional Reactive Programming ({FRP}) is a promising approach to {GUI} design, providing high-level, declarative, compositional abstractions to describe user interactions and time-dependent computations. We present Elm, a practical {FRP} language focused on easy creation of responsive {GUIs}. Elm has two major features: simple declarative support for Asynchronous {FRP}; and purely functional graphical layout. Asynchronous {FRP} allows the programmer to specify when the global ordering of event processing can be violated, and thus enables efficient concurrent execution of {FRP} programs; long-running computation can be executed asynchronously and not adversely affect the responsiveness of the user interface. Layout in Elm is achieved using a purely functional declarative framework that makes it simple to create and combine text, images, and video into rich multimedia displays. Together, Elm's two major features simplify the complicated task of creating responsive and usable {GUIs}.},
	pages = {411--422},
	booktitle = {Proceedings of the 34th {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation},
	publisher = {{ACM}},
	author = {Czaplicki, Evan and Chong, Stephen},
	urldate = {2017-10-08},
	date = {2013},
	keywords = {functional reactive programming, read, graphical user interfaces},
	file = {Reppy_1999_Concurrent programming in ML.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\GJT8CP9S\\Reppy_1999_Concurrent programming in ML.pdf:application/pdf}
}

@inproceedings{meijer_functional_1991,
	title = {Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire},
	abstract = {We develop a calculus for lazy functional programming based on recursion operators associated with data type definitions. For these operators we derive various algebraic laws that are useful in deriving and manipulating programs. We shall show that all example functions in Bird and Wadler's "Introduction to Functional Programming" can be expressed using these operators. 1 Introduction Among the many styles and methodologies for the construction of computer programs the Squiggol style in our opinion deserves attention from the functional programming community. The overall goal of Squiggol is to calculate programs from their specification in the way a mathematician calculates solutions to differential equations, or uses arithmetic to solve numerical problems. It is not hard to state, prove and use laws for well-known operations such as addition, multiplication and ---at the function level--- composition. It is, however, quite hard to state, prove and use laws for arbitrarily recursively ...},
	pages = {124--144},
	publisher = {Springer-Verlag},
	author = {Meijer, Erik and Fokkinga, Maarten and Paterson, Ross},
	date = {1991},
	keywords = {read},
	file = {Citeseer - Snapshot:C\:\\Users\\jeffr\\Zotero\\storage\\GNENLZ6M\\summary.html:text/html;Meijer et al_1991_Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\7TF5SVDS\\Meijer et al_1991_Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire.pdf:application/pdf}
}

@article{bernardy_composable_2016,
	title = {Composable efficient array computations using linear types},
	journaltitle = {Unpublished Draft},
	author = {Bernardy, Jean-Philippe and Juan, Vıctor López and Svenningsson, Josef},
	date = {2016},
	keywords = {read},
	file = {cdead55c69b77425c9688da6ba2dae5aa9be.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\QPJEQ3DT\\cdead55c69b77425c9688da6ba2dae5aa9be.pdf:application/pdf;vectorcomp.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\W7ZPLL5M\\vectorcomp.pdf:application/pdf}
}

@article{bernardy_linear_2017,
	title = {Linear Haskell: practical linearity in a higher-order polymorphic language},
	shorttitle = {Linear Haskell},
	journaltitle = {{arXiv} preprint {arXiv}:1710.09756},
	author = {Bernardy, Jean-Philippe and Boespflug, Mathieu and Newton, Ryan R. and Jones, Simon Peyton and Spiwack, Arnaud},
	date = {2017},
	keywords = {efficiency, read},
	file = {haskell linear types.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\6A8RBU2Y\\haskell linear types.pdf:application/pdf}
}

@article{backus_can_1978,
	title = {Can programming be liberated from the von Neumann style?: a functional style and its algebra of programs},
	volume = {21},
	shorttitle = {Can programming be liberated from the von Neumann style?},
	pages = {613--641},
	number = {8},
	journaltitle = {Communications of the {ACM}},
	author = {Backus, John},
	date = {1978},
	keywords = {read},
	file = {backus_turingaward_lecture.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\DFD84KQH\\backus_turingaward_lecture.pdf:application/pdf}
}

@article{present_cramming_2000,
	title = {Cramming more components onto integrated circuits},
	volume = {56},
	journaltitle = {Readings in computer architecture},
	author = {Present, I.},
	date = {2000},
	keywords = {read},
	file = {gordon_moore_1965_article.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\GGIMRBBN\\gordon_moore_1965_article.pdf:application/pdf}
}

@article{theis_end_2017,
	title = {The End of Moore's Law: A New Beginning for Information Technology},
	volume = {19},
	issn = {1521-9615},
	doi = {10.1109/MCSE.2017.29},
	shorttitle = {The End of Moore's Law},
	abstract = {The insights contained in Gordon Moore's now famous 1965 and 1975 papers have broadly guided the development of semiconductor electronics for over 50 years. However, the field-effect transistor is approaching some physical limits to further miniaturization, and the associated rising costs and reduced return on investment appear to be slowing the pace of development. Far from signaling an end to progress, this gradual "end of Moore's law" will open a new era in information technology as the focus of research and development shifts from miniaturization of long-established technologies to the coordinated introduction of new devices, new integration technologies, and new architectures for computing.},
	pages = {41--50},
	number = {2},
	journaltitle = {Computing in Science Engineering},
	author = {Theis, T. N. and Wong, H. S. P.},
	date = {2017-03},
	keywords = {Algorithm design and analysis, algorithms implemented in hardware, Computer architecture, emerging technologies, field effect transistor, Field effect transistors, Gordon Moore, information technology, introductory and survey, Memory management, memory technologies, Moore's law, Moore's Law, neural nets, Random access memory, read, research and development, scientific computing, Scientific computing, semiconductor electronics, Switching circuits},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\jeffr\\Zotero\\storage\\DXFZJDCY\\7878935.html:text/html}
}

@book{jones_implementing_1993,
	title = {Implementing lazy functional languages on stock hardware: the Spineless Tagless G-machine Version 2.5},
	shorttitle = {Implementing lazy functional languages on stock hardware},
	publisher = {March},
	author = {Jones, Simon L. Peyton},
	date = {1993},
	keywords = {read},
	file = {spineless-tagless-gmachine.pdf:C\:\\Users\\jeffr\\Zotero\\storage\\Z72FBH3X\\spineless-tagless-gmachine.pdf:application/pdf}
}