
@inproceedings{harris_transactional_2006,
	title = {Transactional memory with data invariants},
	volume = {92},
	url = {https://pdfs.semanticscholar.org/9970/789837c38921925f52b4ed4f064fed67b7ca.pdf},
	urldate = {2017-09-10},
	booktitle = {First {ACM} {SIGPLAN} {Workshop} on {Languages}, {Compilers}, and {Hardware} {Support} for {Transactional} {Computing} ({TRANSACT}’06), {Ottowa}},
	author = {Harris, Tim and Jones, Simon Peyton},
	year = {2006},
	keywords = {parallel},
	file = {Harris_Jones_2006_Transactional memory with data invariants.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\GVXGVT64\\Harris_Jones_2006_Transactional memory with data invariants.pdf:application/pdf}
}

@inproceedings{harris_composable_2005,
	title = {Composable memory transactions},
	url = {http://dl.acm.org/citation.cfm?id=1065952},
	urldate = {2017-09-10},
	booktitle = {Proceedings of the tenth {ACM} {SIGPLAN} symposium on {Principles} and practice of parallel programming},
	publisher = {ACM},
	author = {Harris, Tim and Marlow, Simon and Peyton-Jones, Simon and Herlihy, Maurice},
	year = {2005},
	keywords = {parallel},
	pages = {48--60},
	file = {Harris et al_2005_Composable memory transactions.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\NN7HRRH7\\Harris et al_2005_Composable memory transactions.pdf:application/pdf}
}

@book{reppy_concurrent_1999,
	address = {Cambridge [England] ; New York},
	title = {Concurrent programming in {ML}},
	isbn = {978-0-521-48089-5},
	publisher = {Cambridge University Press},
	author = {Reppy, John H.},
	year = {1999},
	keywords = {ML (Computer program language), Parallel processing (Electronic computers)},
	file = {Reppy_1999_Concurrent programming in ML.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\GJT8CP9S\\Reppy_1999_Concurrent programming in ML.pdf:application/pdf}
}

@inproceedings{gajinov_case_2014,
	title = {A {Case} {Study} of {Hybrid} {Dataflow} and {Shared}-{Memory} {Programming} {Models}: {Dependency}-{Based} {Parallel} {Game} {Engine}},
	isbn = {978-1-4799-6905-0},
	shorttitle = {A {Case} {Study} of {Hybrid} {Dataflow} and {Shared}-{Memory} {Programming} {Models}},
	url = {http://ieeexplore.ieee.org/document/6970640/},
	doi = {10.1109/SBAC-PAD.2014.21},
	urldate = {2017-09-10},
	publisher = {IEEE},
	author = {Gajinov, Vladimir and Eric, Igor and Stojanovic, Saa and Milutinovic, Veljko and Unsal, Osman and Ayguade, Eduard and Cristal, Adrian},
	month = oct,
	year = {2014},
	keywords = {parallel},
	pages = {1--8},
	file = {Gajinov et al_2014_A Case Study of Hybrid Dataflow and Shared-Memory Programming Models.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\SMTBMJER\\Gajinov et al_2014_A Case Study of Hybrid Dataflow and Shared-Memory Programming Models.pdf:application/pdf}
}

@inproceedings{tulip_multi-threaded_2006,
	address = {Murdoch University, Australia, Australia},
	series = {{IE} '06},
	title = {Multi-threaded {Game} {Engine} {Design}},
	url = {http://dl.acm.org/citation.cfm?id=1231894.1231896},
	abstract = {Game engines are specialized middleware which facilitate rapid game development. Until now they have been highly optimized to extract maximum performance from single processor hardware. In the last couple of years improvements in single processor hardware have approached physical limits and performance gains have slowed to become incremental. As a consequence, improvements in game engine performance have also become incremental. Currently, hardware manufacturers are shifting to dual and multi-core processor architectures, and the latest game consoles also feature multiple processors. This presents a challenge to game engine developers because of the unfamiliarity and complexity of concurrent programming. The next generation of game engines must address the issues of concurrency if they are to take advantage of the new hardware. This paper discusses the issues, approaches, and tradeoffs that need to be considered in the design of a multi-threaded game engine.},
	booktitle = {Proceedings of the 3rd {Australasian} {Conference} on {Interactive} {Entertainment}},
	publisher = {Murdoch University},
	author = {Tulip, James and Bekkema, James and Nesbitt, Keith},
	year = {2006},
	keywords = {game engine, multi-threaded},
	pages = {9--14}
}

@inproceedings{wadler_linear_1990,
	title = {Linear types can change the world},
	volume = {2},
	url = {https://pdfs.semanticscholar.org/4106/dd3be01f1283f80a8260420138d6ee874753.pdf},
	urldate = {2017-09-11},
	booktitle = {{IFIP} {TC}},
	author = {Wadler, Philip},
	year = {1990},
	keywords = {efficiency},
	pages = {347--359},
	file = {Wadler_1990_Linear types can change the world.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\3ZDJI72M\\Wadler_1990_Linear types can change the world.pdf:application/pdf}
}

@inproceedings{yang_efficient_2015,
	title = {Efficient communication and collection with compact normal forms},
	isbn = {978-1-4503-3669-7},
	url = {http://dl.acm.org/citation.cfm?doid=2784731.2784735},
	doi = {10.1145/2784731.2784735},
	language = {en},
	urldate = {2017-09-11},
	publisher = {ACM Press},
	author = {Yang, Edward Z. and Campagna, Giovanni and Ağacan, Ömer S. and El-Hassany, Ahmed and Kulkarni, Abhishek and Newton, Ryan R.},
	year = {2015},
	keywords = {efficiency},
	pages = {362--374},
	file = {Yang et al_2015_Efficient communication and collection with compact normal forms.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\NT8NBSWV\\Yang et al_2015_Efficient communication and collection with compact normal forms.pdf:application/pdf}
}

@article{tagliasacchi_cascade:_2008,
	title = {Cascade: {A} {Parallel} {Programming} {Framework} for {Video} {Game} {Engines}},
	url = {https://pdfs.semanticscholar.org/b60f/07ad1eb410352e2b51b9b01d08df593f610b.pdf#page=8},
	abstract = {The Cascade Parallel Processing Framework (PPF) is a user
level library that facilitates manual parallelization of complex
C++ systems. In Cascade, processing duties of the system
are enclosed in a Cascade Task. Tasks are linked by
dependencies in a task dependency graph. The task graph
is traversed at runtime by the Cascade Job Manager who
assigns tasks to threads for execution. The Job Manager
must correctly satisfy dependencies while maximizing performance.
While a task-based PPF is not a new concept,
Cascade’s unique goal is to address complex systems, such
as video game engines. These systems are built as multiple
interacting sub-systems, with non-trivial dependencies. Existing
PPFs, while suitable for parallelization of individual
sub-systems, do not solve the entire problem. In this paper
we describe the early design and implementation of Cascade,
present preliminary evaluation, and outline plans for future
research.},
	urldate = {2017-09-10},
	journal = {PESPMA 2008},
	author = {Tagliasacchi, Andrea and Dickie, Ryan and Couture-Beil, Alex and Best, Micah and Fedorova, Alexandra and Bronsword, Andrew},
	year = {2008},
	keywords = {engine, parallel},
	pages = {2},
	file = {Tagliasacchi et al_2008_Cascade.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\UASTC3VU\\Tagliasacchi et al_2008_Cascade.pdf:application/pdf}
}

@inproceedings{nilsson_dynamic_2005,
	title = {Dynamic optimization for functional reactive programming using generalized algebraic data types},
	isbn = {978-1-59593-064-4},
	url = {http://portal.acm.org/citation.cfm?doid=1086365.1086374},
	doi = {10.1145/1086365.1086374},
	language = {en},
	urldate = {2017-09-10},
	publisher = {ACM Press},
	author = {Nilsson, Henrik},
	year = {2005},
	keywords = {FRP},
	pages = {54},
	file = {Nilsson_2005_Dynamic optimization for functional reactive programming using generalized.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\FEFKNPNT\\Nilsson_2005_Dynamic optimization for functional reactive programming using generalized.pdf:application/pdf}
}

@inproceedings{elliott_push-pull_2009,
	address = {New York, NY, USA},
	series = {Haskell '09},
	title = {Push-pull {Functional} {Reactive} {Programming}},
	isbn = {978-1-60558-508-6},
	url = {http://doi.acm.org/10.1145/1596638.1596643},
	doi = {10.1145/1596638.1596643},
	abstract = {Functional reactive programming (FRP) has simple and powerful semantics, but has resisted efficient implementation. In particular, most past implementations have used demand-driven sampling, which accommodates FRP's continuous time semantics and fits well with the nature of functional programming. Consequently, values are wastefully recomputed even when inputs don't change, and reaction latency can be as high as the sampling period. This paper presents a way to implement FRP that combines data- and demand-driven evaluation, in which values are recomputed only when necessary, and reactions are nearly instantaneous. The implementation is rooted in a new simple formulation of FRP and its semantics and so is easy to understand and reason about. On the road to a new implementation, we'll meet some old friends (monoids, functors, applicative functors, monads, morphisms, and improving values) and make some new friends (functional future values, reactive normal form, and concurrent "unambiguous choice").},
	booktitle = {Proceedings of the 2Nd {ACM} {SIGPLAN} {Symposium} on {Haskell}},
	publisher = {ACM},
	author = {Elliott, Conal M.},
	year = {2009},
	keywords = {concurrency, data-driven, demand-driven, functional reactive programming, semantics, FRP},
	pages = {25--36}
}

@article{andrews_designing_2009,
	title = {Designing the framework of a parallel game engine},
	volume = {109},
	url = {http://www.design1online.com/downloads/whitepapers/parallelgameengine.pdf},
	urldate = {2017-09-10},
	journal = {Articles on Intel Software Network},
	author = {Andrews, Jeff},
	year = {2009},
	keywords = {engine, parallel},
	pages = {127},
	file = {Andrews_2009_Designing the framework of a parallel game engine.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\NVHT4ZIV\\Andrews_2009_Designing the framework of a parallel game engine.pdf:application/pdf}
}

@inproceedings{nilsson_functional_2002,
	title = {Functional reactive programming, continued},
	url = {http://dl.acm.org/citation.cfm?id=581695},
	urldate = {2017-09-11},
	booktitle = {Proceedings of the 2002 {ACM} {SIGPLAN} workshop on {Haskell}},
	publisher = {ACM},
	author = {Nilsson, Henrik and Courtney, Antony and Peterson, John},
	year = {2002},
	keywords = {FRP},
	pages = {51--64},
	file = {Nilsson et al_2002_Functional reactive programming, continued.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\4F5USTEW\\Nilsson et al_2002_Functional reactive programming, continued.pdf:application/pdf}
}

@inproceedings{sansom_generational_1993,
	title = {Generational garbage collection for {Haskell}},
	url = {http://dl.acm.org/citation.cfm?id=165195},
	urldate = {2017-09-11},
	booktitle = {Proceedings of the conference on {Functional} programming languages and computer architecture},
	publisher = {ACM},
	author = {Sansom, Patrick M. and Peyton Jones, Simon L.},
	year = {1993},
	keywords = {efficiency},
	pages = {106--116},
	file = {Sansom_Peyton Jones_1993_Generational garbage collection for Haskell.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\7AITDWUH\\Sansom_Peyton Jones_1993_Generational garbage collection for Haskell.pdf:application/pdf}
}

@book{jeannot_euro-par_2011,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Euro-{Par} 2011 {Parallel} {Processing}},
	volume = {6853},
	isbn = {978-3-642-23396-8 978-3-642-23397-5},
	url = {http://link.springer.com/10.1007/978-3-642-23397-5},
	urldate = {2017-09-10},
	publisher = {Springer Berlin Heidelberg},
	editor = {Jeannot, Emmanuel and Namyst, Raymond and Roman, Jean and Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard},
	year = {2011},
	note = {DOI: 10.1007/978-3-642-23397-5},
	keywords = {parallel},
	file = {Jeannot et al_2011_Euro-Par 2011 Parallel Processing.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\358GHKT9\\Jeannot et al_2011_Euro-Par 2011 Parallel Processing.pdf:application/pdf}
}

@inproceedings{discolo_lock_2006,
	title = {Lock free data structures using {STM} in {Haskell}},
	url = {http://link.springer.com/10.1007%2F11737414_6},
	urldate = {2017-09-10},
	booktitle = {International {Symposium} on {Functional} and {Logic} {Programming}},
	publisher = {Springer},
	author = {Discolo, Anthony and Harris, Tim and Marlow, Simon and Jones, Simon Peyton and Singh, Satnam},
	year = {2006},
	keywords = {parallel},
	pages = {65--80},
	file = {Discolo et al_2006_Lock free data structures using STM in Haskell.pdf:C\:\\Users\\Jeff\\Zotero\\storage\\ZCH64IA9\\Discolo et al_2006_Lock free data structures using STM in Haskell.pdf:application/pdf}
}